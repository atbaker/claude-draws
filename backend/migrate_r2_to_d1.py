#!/usr/bin/env python3
"""
One-time migration script to populate D1 artworks table from local gallery-metadata.json.

Usage:
    cd backend
    uv run python migrate_r2_to_d1.py [--remote]

    --remote: Apply to remote D1 database instead of local
"""

import asyncio
import json
import os
import subprocess
import sys
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Paths
BACKEND_ROOT = Path(__file__).parent
GALLERY_DIR = BACKEND_ROOT.parent / "gallery"
GALLERY_METADATA_PATH = GALLERY_DIR / "src" / "lib" / "gallery-metadata.json"

# Check for --remote flag
USE_REMOTE = "--remote" in sys.argv


def execute_d1_sql(sql: str, database_name: str = "claudedraws-dev") -> None:
    """Execute SQL against local or remote D1 database using wrangler."""
    remote_flag = ["--remote"] if USE_REMOTE else ["--local"]

    # Use wrangler d1 execute
    result = subprocess.run(
        ["wrangler", "d1", "execute", database_name] + remote_flag + ["--command", sql],
        cwd=GALLERY_DIR,
        capture_output=True,
        text=True
    )

    if result.returncode != 0:
        raise Exception(f"D1 execute failed: {result.stderr}")


def insert_artwork(artwork_data: dict) -> None:
    """Insert artwork into D1 artworks table."""
    # Escape single quotes in strings for SQL
    def escape_sql(value):
        if value is None:
            return "NULL"
        if isinstance(value, bool):
            return "1" if value else "0"
        if isinstance(value, str):
            # Escape single quotes for SQL
            escaped = value.replace("'", "''")
            # Replace newlines with spaces to avoid SQL issues
            escaped = escaped.replace('\n', ' ')
            return f"'{escaped}'"
        return f"'{value}'"

    sql = f"""
        INSERT OR REPLACE INTO artworks
        (id, title, artist_statement, image_url, submission_id, created_at, video_url, prompt, autogenerated)
        VALUES (
            {escape_sql(artwork_data["id"])},
            {escape_sql(artwork_data.get("title", "Untitled"))},
            {escape_sql(artwork_data.get("artistStatement"))},
            {escape_sql(artwork_data["imageUrl"])},
            {escape_sql(artwork_data.get("submissionId"))},
            {escape_sql(artwork_data["createdAt"])},
            {escape_sql(artwork_data.get("videoUrl"))},
            {escape_sql(artwork_data.get("prompt"))},
            {1 if artwork_data.get("autogenerated", False) else 0}
        );
    """

    execute_d1_sql(sql)


def main():
    """Main migration function."""
    target = "remote" if USE_REMOTE else "local"
    print(f"üöÄ Starting gallery-metadata.json ‚Üí D1 migration ({target})")
    print(f"   Source: {GALLERY_METADATA_PATH}\n")

    # Check if gallery-metadata.json exists
    if not GALLERY_METADATA_PATH.exists():
        print(f"‚ùå Gallery metadata file not found: {GALLERY_METADATA_PATH}")
        sys.exit(1)

    try:
        # Load gallery metadata
        print("üìã Loading gallery metadata...")
        with open(GALLERY_METADATA_PATH, "r") as f:
            gallery_data = json.load(f)

        artworks = gallery_data.get("artworks", [])
        print(f"‚úì Found {len(artworks)} artworks\n")

        if not artworks:
            print("‚ö†Ô∏è  No artworks found in gallery metadata")
            return

        # Process each artwork
        migrated_count = 0
        error_count = 0

        for artwork in artworks:
            artwork_id = artwork.get("id")

            try:
                # Insert into D1
                print(f"   Inserting {artwork_id} into D1...")
                insert_artwork(artwork)

                title = artwork.get("title", "Untitled")
                if title:
                    print(f"   ‚úì Migrated: {title[:50]}\n")
                else:
                    print(f"   ‚úì Migrated: (no title)\n")
                migrated_count += 1

            except Exception as e:
                print(f"   ‚ùå Error processing {artwork_id}: {e}\n")
                error_count += 1

        # Print summary
        print("=" * 60)
        print("üìä Migration Summary")
        print("=" * 60)
        print(f"‚úì Successfully migrated: {migrated_count}")
        print(f"‚ùå Errors: {error_count}")
        print(f"üì¶ Total processed: {len(artworks)}")
        print("=" * 60)

        if error_count > 0:
            sys.exit(1)

    except Exception as e:
        print(f"‚ùå Migration failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
