import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';

// Transform D1 snake_case to camelCase for frontend
function transformArtwork(artwork: any) {
	return {
		id: artwork.id,
		title: artwork.title,
		artistStatement: artwork.artist_statement,
		imageUrl: artwork.image_url,
		submissionId: artwork.submission_id,
		createdAt: artwork.created_at,
		videoUrl: artwork.video_url,
		prompt: artwork.prompt,
		autogenerated: Boolean(artwork.autogenerated)
	};
}

export const GET: RequestHandler = async ({ platform, url }) => {
	const db = platform?.env?.DB;

	if (!db) {
		return json({ error: 'Database not available' }, { status: 500 });
	}

	try {
		// Parse query parameters
		const limit = parseInt(url.searchParams.get('limit') || '24');
		const offset = parseInt(url.searchParams.get('offset') || '0');
		const filterAutogenerated = url.searchParams.get('autogenerated');

		// Build SQL query
		let sql = `
			SELECT id, title, artist_statement, image_url, submission_id, created_at, video_url, prompt, autogenerated
			FROM artworks
		`;

		const params: number[] = [];

		// Optional filter for autogenerated artworks
		if (filterAutogenerated !== null) {
			sql += ` WHERE autogenerated = ?`;
			params.push(filterAutogenerated === 'true' ? 1 : 0);
		}

		// Order by most recent first
		sql += ` ORDER BY created_at DESC`;

		// Add pagination
		sql += ` LIMIT ? OFFSET ?`;
		params.push(limit, offset);

		// Execute query
		const result = await db.prepare(sql).bind(...params).all();

		// Get total count for pagination metadata
		let countSql = `SELECT COUNT(*) as total FROM artworks`;
		if (filterAutogenerated !== null) {
			countSql += ` WHERE autogenerated = ?`;
		}

		const countResult = await db
			.prepare(countSql)
			.bind(...(filterAutogenerated !== null ? [filterAutogenerated === 'true' ? 1 : 0] : []))
			.first<{ total: number }>();

		const total = countResult?.total || 0;

		// Transform artworks to camelCase
		const artworks = (result.results || []).map(transformArtwork);

		return json({
			success: true,
			artworks,
			pagination: {
				limit,
				offset,
				total,
				hasMore: offset + limit < total
			}
		});
	} catch (error) {
		console.error('Error fetching artworks:', error);
		return json(
			{
				error: 'Failed to fetch artworks',
				details: error instanceof Error ? error.message : 'Unknown error'
			},
			{ status: 500 }
		);
	}
};
